// Settings
// 3d or 2d?
$planar-3d: false !default;

// set the dimensions of yr grid
$planar-x: 12;
$planar-y: 10;
//$planar-z: 2;

$point-size: 30px;
$spacing: 10px;

@function rando-shuffle($list) {
  $list-length: length($list);

  @while($list-length > 0) {
    $rand: random($list-length);
    $temp: nth($list, $rand);
    $list: set-nth($list, $rand, nth($list, $list-length));
    $list: set-nth($list, $list-length, $temp);
    $list-length: $list-length - 1;
  }

  @return $list;
}

// Make the grid outta maps and maps and maps
@function make-grid($x-max, $y-max, $z-max: null) {
  $grid: ();
  @for $i from 1 through $x-max {
    $row: ();

    @if $planar-3d == false {
      @for $j from 1 through $y-max {
        $row: map-merge($row, ($j: false));
      } 
    }
    @else if $planar-3d == true {
      @for $j from 1 through $y-max {
        $line: ();
        @for $k from 1 through $z-max {
          $line: map-merge($line, ($k: false));
        }
        $row: map-merge($row, ($j: $line));
      }
    }
    $grid: map-merge($grid, ($i: $row));
  }
  @return $grid;
}

// Set the value of a grid point based on its coords
@function set-grid($grid, $val, $x, $y, $z: null) {
  @if ($planar-3d == false) {
    // get the x-map, merge the new y-map into it
    $row: map-merge(map-get($grid, $x), ($y: $val));
    // merge the new x-map into the grid
    @return map-merge($grid, ($x: $row));
  }
  @else if ($planar-3d == true) {
    // get the x-val map, and the y-val map from that
    $row: map-get($grid, $x);
    // and then the y-val map from that
    $line: map-get($row, $y);
    // merge in the new z-map into the y-map
    $line: map-merge($line, ($z: $val));
    // merge in the new y-map into the x-map
    $row: map-merge($row, ($y: $line));
    // merge the new x-map into the grid
    $grid: map-merge($grid, ($x: $row));
    @return $grid;
  }
}

// Get the value of a grid point
@function get-value($grid, $x, $y, $z: null) {
  @if ($planar-3d == true) {
    @return map-get(map-get(map-get($grid, $x), $y), $z);
  }
  @else if ($planar-3d == false) {
    @return map-get(map-get($grid, $x), $y);
  }
}

@function get-deep-value($grid, $val, $x, $y, $z: null) {
  @return map-get(get-value($grid, $x, $y, $z), $val);
}

@function bulk-set($grid, $val) {
  $grid: $grid;
  @for $i from 1 through $planar-x {
    @for $j from 1 through $planar-y {
      @if $planar-3d == false {
        $grid: set-grid($grid, $val, $i, $j);
      }
      @else if $planar-3d == true {
        @for $k from 1 through $planar-z {
          $grid: set-grid($grid, $val, $i, $j, $k);
        }
      }
    }
  }
  @return $grid;
}

@function bulk-get($grid) {
  $vals: ();
  @for $i from 1 through $planar-x {
    @for $j from 1 through $planar-y {
      @if ($planar-3d == false) {
        $vals: join($vals, map-values(map-get(map-get($grid, $i), $j)));
      }
      @else if ($planar-3d == true) {
        @for $k from 1 through $planar-z {
          $vals: join($vals, map-get(map-get(map-get($grid, $i), $j), $k));
        }
      }
    }
  }
  @return $vals;
}

@mixin print-2d($grid) {
  @at-root {
    html, body { 
      min-height: 100%;
    }
    #{$grid-container} {
      position: absolute;
      top: 0;
      left: 800px;
      right: 0;
      bottom: 90px;
      margin: auto;
      width: (($point-size + $spacing) * $planar-x) - $spacing;
      height: (($point-size + $spacing) * $planar-y) - $spacing;
      > * {
        width: $point-size;
        height: $point-size;
        position: absolute;
        top: 0;
        left: 0;
        $count: 1;
        $ordered-list: ();

        @for $x from 1 through $planar-x {
          @for $y from 1 through $planar-y {
            $grid: set-grid($grid, (x: ($x - 1) * ($spacing + $point-size), 
                                    y: ($y - 1) * ($spacing + $point-size)),
                                    $x, $y);
            $ordered-list: append($ordered-list, ($x, $y));
          }
        }    

        $shuffled-list: rando-shuffle($ordered-list);
        $shuffled-list-two: rando-shuffle($ordered-list);

        @for $i from 1 through length($ordered-list) {
          $this-x: nth(nth($ordered-list, $i), 1);
          $this-y: nth(nth($ordered-list, $i), 2);
          $rand-x: nth(nth($shuffled-list, $i), 1);
          $rand-y: nth(nth($shuffled-list, $i), 2);
          $altrand-x: nth(nth($shuffled-list-two, $i), 1);
          $altrand-y: nth(nth($shuffled-list-two, $i), 2);
          &:nth-child(#{$i}) {
            transform: translate(get-deep-value($grid, x, $this-x, $this-y), 
                               get-deep-value($grid, y, $this-x, $this-y));
            animation: shunt-#{$i} 8s ease infinite alternate;
            $red: ($this-x * 10) + 30;
            $blue: ($this-y * 10) + 30;
            background: rgba($red, 10, $blue, 1);
            box-shadow: 3px 3px rgba($red, 10, $blue, .5);
            @keyframes shunt-#{$i} {
              0%, 10% {
                transform: translate(get-deep-value($grid, x, $this-x, $this-y), 
                                     get-deep-value($grid, y, $altrand-x, $altrand-y));
              }
              30%, 40% {
                transform: translate(get-deep-value($grid, x, $rand-x, $rand-y), 
                                     get-deep-value($grid, y, $this-x, $this-y));
              }
              70%, 80% {
                transform: translate(get-deep-value($grid, x, $this-x, $this-y), 
                                     get-deep-value($grid, y, $rand-x, $rand-y));
              }
              95%, 100% {
                transform: translate(get-deep-value($grid, x, $altrand-x, $altrand-y), 
                                     get-deep-value($grid, y, $this-x, $this-y));
              }
            }
          }
        }
        
      }
    }
  }
}

@mixin iterate($list) {
  @at-root {
    #{$grid-container} {
      @for $i from 1 through length($list) {
        > *:nth-child(#{$i}) {
          @content;
        }
      }  
    }
  }
}

$grid: make-grid($planar-x, $planar-y);
$grid-container: '.wrap';

body {
  @include print-2d($grid);
}



.contact-form {
    width: 100%;
    margin-top: 20px;
  
    ul {
      padding: 0;
      margin: 0;
  
      li {
        padding: 0;
        margin: 0;
        list-style: none;
        margin-bottom: 10px;
        opacity: 0;
        overflow: hidden;
        display: block;
        clear: both;
        position: relative;
        animation: fadeInUp 2s 2s;
        animation-fill-mode: forwards;
      }
  
      li.half {
        width: 49%;
        margin-left: 2%;
        float: left;
        clear: none;
  
        &:first-child {
          margin-left: 0;
        }
      }
    }
  
    input[type='text'],
    input[type='email'] {
      width: 100%;
      border: 0;
      background: #c4d1d1;
      height: 50px;
      font-size: 16px;
      color: #fff;
      padding: 0 20px;
      box-sizing: border-box;
    }
  
    textarea {
      width: 100%;
      border: 0;
      background: #c4d1d1;
      height: 50px;
      font-size: 16px;
      color: #fff;
      padding: 20px;
      box-sizing: border-box;
      min-height: 150px;
    }
  
    .flat-button {
      cursor: pointer;
      color: #ffd700;
      font-size: 11px;
      letter-spacing: 3px;
      text-decoration: none;
      padding: 8px 10px;
      border: 1px solid #ffd700;
      float: left;
      border-radius: 4px;
      background: 0 0;
      text-transform: uppercase;
      float: right;
      text-align: center;
      margin-right: 0px;
      margin-top: 10px;

      &:hover {
        background: #ffd700;
        color: #333;
        transition: 0.5s;
      }
    }
  }
  
  .map-wrap {
    background: rgba(8, 253, 216, 0.1);
    float: right;
    width: 53%;
    height: 115%;
    margin-top: -3%;
  }
  
  .leaflet-container {
    position: relative;
    width: 100%;
    height: 100%;
    opacity: 0;
    animation: backInRight 1s 1.2s;
    animation-fill-mode: forwards;
  }
  
  .info-map {
    position: absolute;
    background: #000;
    top: 50px;
    right: 30%;
    z-index: 999999;
    width: 267px;
    padding: 20px;
    color: #fff;
    font-family: 'Helvetica';
    font-size: 17px;
    font-weight: 300;
    opacity: 0;
    animation: fadeIn 1s 1.5s;
    animation-fill-mode: forwards;
  
    span {
      font-size: 16px;
  
      span {
        color: #ffd700;
      }
    }
  }


.container.contact-page {
  h1 {
    font-size: 53px;
    font-family: 'Coolvetica';
    color: #ffd700;
    font-weight: 400;
    margin-top: 0;
    position: relative;
    top: 10px;
    margin-bottom: 40px;
    left: 0px;

    &:before {
      content: '<h1>';
      font-family: 'La Belle Aurore', cursive;
      color: #ffd700;
      font-size: 18px;
      position: absolute;
      margin-top: -10px;
      left: -10px;
      opacity: 0.6;
      line-height: 18px;
    }

    &:after {
      content: '<h1/>';
      font-family: 'La Belle Aurore', cursive;
      color: #ffd700;
      font-size: 18px;
      line-height: 18px;
      position: absolute;
      left: -30px;
      bottom: -20px;
      margin-left: 20px;
      opacity: 0.6;
    }
  }
  .text-zone{
    position: absolute;
    left: 15%;
    top: 45%;
    transform: translateY(-50%);
    width: 35%;
    vertical-align: middle;
    display: table-cell;
    max-height: 90%;
    margin-top: 10px;
  }

  p {
    margin-top: 50px;
    font-size: 18px;
    color: #fff;
    font-family: 'Itim', cursive;
    font-weight: 300;
    max-width: fit-content;
    animation: pulse 1s;
    &:nth-of-type(1) {
      animation-delay: 1.1s;
    }
    &:nth-of-type(2) {
      animation-delay: 1.2s;
    }
    &:nth-of-type(3) {
      animation-delay: 1.3s;
    }
  }


    .text-animate-hover {
      &:hover {
        color: #fff;
      }
    }
}